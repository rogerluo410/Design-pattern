<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>prototype pattern--原型模式 - 专注c++ - 博客频道 - CSDN.NET</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="description" content="prototype pattern称为原型模式在软件系统中，经常面临着“某些结构复杂的对象”的创建工作，由于需求的变化，这些对象经常面临着剧烈的变化，但是他们却拥有比较稳定一致的接口。Prototype设计模式，就是为了解决如何向“客户程序”隔离出“这些易变对象”，从而使得“依赖这些易变对象的客户程序”不随着需求的改变而改变。Prototype设计模式指定创建对象的种类，然后通过拷贝这些原" />
<script src="http://static.blog.csdn.net/scripts/jquery.js" type="text/javascript"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/ad.js?v=1.1"></script>
<link rel="Stylesheet" type="text/css" href="http://static.blog.csdn.net/skin/dark1/css/style.css?v=1.1" />
<link id="RSSLink" title="RSS" type="application/rss+xml" rel="alternate" href="/couhujia/rss/list" />
<link rel="shortcut icon" href="/favicon.ico" />
<link type="text/css" rel="stylesheet" href="http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/default.css" />
</head>
<body>
<script src="http://csdnimg.cn/pubnav/js/pub_topnav_2011.js"type="text/javascript"></script>

<div id="container">
<div id="header">
    <div class="header">
        <div id="blog_title">
            <h1><a href="http://blog.csdn.net/couhujia">专注c++</a></h1>
            <h2>不积跬步无以至千里，不积小流无以成江海</h2>
            <div class="clear"></div>
        </div>
        <div class="clear"></div>
    </div>
</div>
<div id="navigator">
    <div class="navigator_bg"></div>
    <div class="navigator">
        <ul>
            <li id="btnContents"><a href="http://blog.csdn.net/couhujia?viewmode=contents"><span><img src="http://static.blog.csdn.net/images/ico_list.gif">目录视图</span></a></li>
            <li id="btnView"><a href="http://blog.csdn.net/couhujia?viewmode=list"><span><img src="http://static.blog.csdn.net/images/ico_summary.gif">摘要视图</span></a></li>
            <li id="btnRss"><a href="http://blog.csdn.net/couhujia/rss/list"><span><img src="http://static.blog.csdn.net/images/ico_rss.gif">订阅</span></a></li>
</ul>
    </div>
</div>
<script type="text/javascript">
    var username = "couhujia";
    var _blogger = username;
    var blog_address = "http://blog.csdn.net/couhujia";
    var static_host = "http://static.blog.csdn.net";
    var currentUserName = "";
</script>

<div id="body">
<div id="main">
<div class="main">
<div class="notice"> 

<a href="https://code.csdn.net/blog/12" target="_blank">
<font color=red>公告：博客新增直接引用代码功能</font></a>



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

<a href="http://www.csdn.net/article/2013-07-24/2816320" target="_blank"><font color=blue>专访谭海燕：移动互联网开发的那些事
</font></a>

&nbsp;&nbsp;&nbsp;&nbsp;

<a href="http://blog.csdn.net/csdnproduct/article/details/9495139
"target="_blank">
<font color=red>CSDN博客频道自定义域名、标签搜索功能上线啦！


 </font></a>

&nbsp;&nbsp;&nbsp;&nbsp;

<a href="http://blog.csdn.net/adali/article/details/9813651"target="_blank">
<font color=blue>独一无二的职位：开源社区经理 
 </font></a>




</div>
<div id="article_details" class="details">
    <div class="article_title">
    <span class="ico ico_type_Original"></span>
    <h3>
        <span class="link_title"><a href="/couhujia/article/details/8365258">
        prototype pattern--原型模式
        </a></span>
    </h3>
</div>

        
    <div class="article_manage">
        <span class="link_categories">
        分类：
            <a href="/couhujia/article/category/1310130">设计模式</a> 
        </span>
    <span class="link_postdate">2012-12-21 19:26</span>
    <span class="link_view" title="阅读次数">167人阅读</span>
    <span class="link_comments" title="评论次数"><a href="#comments">评论</a>(0)</span>
    <span class="link_collect"><a href="javascript:void(0);" onclick="javascript:collectArticle('prototype pattern--原型模式','8365258');return false;" title="收藏">收藏</a></span>
    <span class="link_report"><a href="#report"  onclick="javascript:report(8365258,2);return false;" title="举报">举报</a></span>
    
</div>
<div class="tag2box"><a href='http://blog.csdn.net/tag/details.html?tag=c%2b%2b%e5%9f%ba%e7%a1%80' target=_blank>c++基础</a></div>


    
<div id="article_content" class="article_content">

<div><span style="font-family:仿宋; font-size:16px">prototype pattern称为原型模式</span></div>
<div><span style="font-family:仿宋; font-size:16px">在软件系统中，经常面临着“某些结构复杂的对象”的创建工作，由于需求的变化，这些对象经常面临着剧烈的变化，但是他们却拥有比较稳定一致的接口。Prototype设计模式，就是为了解决如何向“客户程序”隔离出“这些易变对象”，从而使得“依赖这些易变对象的客户程序”不随着需求的改变而改变。</span></div>
<div><span style="font-family:仿宋; font-size:16px">Prototype设计模式指定创建对象的种类，然后通过拷贝这些原型来创建新的对象。</span></div>
<div>
<p><span style="font-family:仿宋; font-size:16px">要点：</span></p>
<ul>
<li><span style="font-family:仿宋; font-size:16px">Prototype设计模式同样用于隔离类对象的使用者和具体类型(易变类)之间的耦合关系，它同样要求这些“易变类”拥有“稳定的接口”。</span></li><li><span style="font-family:仿宋; font-size:16px">Prototype设计模式对于“如何创建易变类的实体对象”采用“原型克隆”的方法来做，它使得我们可以非常灵活地动态创建“拥有某些稳定接口”的新对象，所需要的工作仅仅是注册一个新类的对象(即原型)，然后在需要的地方不断地Clone</span></li><li><span style="font-family:仿宋; font-size:16px">Clone时要注意使用Deep Clone。</span></li></ul>
</div>
<div><span style="font-family:仿宋; font-size:16px">深拷贝与浅拷贝区别：</span></div>
<div><span style="font-family:仿宋; font-size:16px">浅拷贝也称位拷贝，就是对象的数据成员之间的简单赋&#20540;，例如一个类我们没有具体定义其拷贝构造函数当用该类的一个对象去给令一个对象赋&#20540;时所执行的过程就是浅拷贝。</span></div>
<div><span style="font-family:仿宋; font-size:16px">如果对象中没有其他的资源（如：堆，文件，系统资源等），则深拷贝和浅拷贝没有什么区别，但是如果有那么浅拷贝只是简单的引用这些资源，而深拷贝是会复制这些资源的。</span></div>
<div><span style="font-family:仿宋; font-size:16px">举例说明：</span></div>
<div>
<div class="cnblogs_code">
<pre><span style="color:#008080"> 1</span> <span style="color:#0000ff">class</span><span style="color:#000000"> People
</span><span style="color:#008080"> 2</span> <span style="color:#000000">{
</span><span style="color:#008080"> 3</span>     <span style="color:#0000ff">public</span><span style="color:#000000">:
</span><span style="color:#008080"> 4</span>         People(Hair *ha,<span style="color:#0000ff">int</span><span style="color:#000000"> a)
</span><span style="color:#008080"> 5</span> <span style="color:#000000">        :h(ha),age(a)
</span><span style="color:#008080"> 6</span> <span style="color:#000000">        {}
</span><span style="color:#008080"> 7</span>     <span style="color:#0000ff">private</span><span style="color:#000000">:
</span><span style="color:#008080"> 8</span>         Hair *<span style="color:#000000">h; 
</span><span style="color:#008080"> 9</span>         <span style="color:#0000ff">int</span><span style="color:#000000"> age; 
</span><span style="color:#008080">10</span> <span style="color:#000000">};
</span><span style="color:#008080">11</span> Hair * ha=<span style="color:#0000ff">new</span><span style="color:#000000"> Hair(....);
</span><span style="color:#008080">12</span> <span style="color:#000000">People p1(ha,a);
</span><span style="color:#008080">13</span> People p2=p1;<span style="color:#008000">//</span><span style="color:#008000">浅拷贝  p2.h=p1.h, p2.age=p1.age</span></pre>
</div>
<div><span style="font-family:仿宋; font-size:16px">那么如果是浅拷贝（位拷贝）只是简单的将Hair *h指针指向ha指针指向的资源。那么这里想象下这里如果在销毁p1的时候我们会释放p1.h所指向的资源，那么在使用p2就会发生错误！！所以我们平常应该尽量少使用浅拷贝，这会给程序带来危害。</span></div>
<div><span style="font-family:仿宋; font-size:16px">当然从这里我们也可以得知，如果没有资源，深浅拷贝是没有任何区别的。</span></div>
<div><span style="font-family:仿宋; font-size:16px">&nbsp;</span></div>
<div><span style="font-family:仿宋; font-size:16px">下面接着看原型模式：</span></div>
<div>
<p><img src="http://pic002.cnblogs.com/images/2012/32873/2012121322554070.png" alt=""></p>
<div class="cnblogs_code">
<pre><span style="color:#008080"> 1</span> <span style="color:#0000ff">class</span><span style="color:#000000"> wheel
</span><span style="color:#008080"> 2</span> <span style="color:#000000">{
</span><span style="color:#008080"> 3</span>     <span style="color:#0000ff">public</span><span style="color:#000000">:
</span><span style="color:#008080"> 4</span>         wheel(std::<span style="color:#0000ff">string</span> n,<span style="color:#0000ff">int</span><span style="color:#000000"> l)
</span><span style="color:#008080"> 5</span> <span style="color:#000000">        :name(n),loadCapacity(l)
</span><span style="color:#008080"> 6</span> <span style="color:#000000">        {}
</span><span style="color:#008080"> 7</span> <span style="color:#000000">        wheel( )
</span><span style="color:#008080"> 8</span>         :name(<span style="color:#800000">&quot;&quot;</span>),loadCapacity(<span style="color:#800080">0</span><span style="color:#000000">)
</span><span style="color:#008080"> 9</span> <span style="color:#000000">        {}
</span><span style="color:#008080">10</span>         <span style="color:#0000ff">void</span><span style="color:#000000"> show();
</span><span style="color:#008080">11</span>         wheel *<span style="color:#000000"> Clone();
</span><span style="color:#008080">12</span>     <span style="color:#0000ff">private</span><span style="color:#000000">:
</span><span style="color:#008080">13</span>         std::<span style="color:#0000ff">string</span><span style="color:#000000"> name;
</span><span style="color:#008080">14</span>         <span style="color:#0000ff">int</span><span style="color:#000000"> loadCapacity;
</span><span style="color:#008080">15</span> <span style="color:#000000">};
</span><span style="color:#008080">16</span> <span style="color:#0000ff">void</span><span style="color:#000000"> wheel::show( )
</span><span style="color:#008080">17</span> <span style="color:#000000">{
</span><span style="color:#008080">18</span>     std::cout&lt;&lt;<span style="color:#800000">&quot;</span><span style="color:#800000">The wheel name is </span><span style="color:#800000">&quot;</span>&lt;&lt;name&lt;&lt;<span style="color:#000000">std::endl;
</span><span style="color:#008080">19</span>     std::cout&lt;&lt;<span style="color:#800000">&quot;</span><span style="color:#800000">The wheel loadCapacity is </span><span style="color:#800000">&quot;</span>&lt;&lt;loadCapacity&lt;&lt;<span style="color:#000000">std::endl;
</span><span style="color:#008080">20</span> <span style="color:#000000">}
</span><span style="color:#008080">21</span> 
<span style="color:#008080">22</span> wheel *<span style="color:#000000"> wheel::Clone()
</span><span style="color:#008080">23</span> <span style="color:#000000">{
</span><span style="color:#008080">24</span>     <span style="color:#0000ff">return</span> <span style="color:#0000ff">new</span><span style="color:#000000"> wheel(name,loadCapacity);
</span><span style="color:#008080">25</span> <span style="color:#000000">}
</span><span style="color:#008080">26</span> 
<span style="color:#008080">27</span> <span style="color:#0000ff">class</span><span style="color:#000000"> Car
</span><span style="color:#008080">28</span> <span style="color:#000000">{
</span><span style="color:#008080">29</span>     <span style="color:#0000ff">public</span><span style="color:#000000">:
</span><span style="color:#008080">30</span>         Car(std::<span style="color:#0000ff">string</span> color,wheel* w,std::<span style="color:#0000ff">string</span><span style="color:#000000"> engine)
</span><span style="color:#008080">31</span> 
<span style="color:#008080">32</span> <span style="color:#000000">        :_color(color),_wheel(w),_engine(engine)
</span><span style="color:#008080">33</span> <span style="color:#000000">        {}
</span><span style="color:#008080">34</span>         <span style="color:#0000ff">virtual</span> Car* Clone( )=<span style="color:#800080">0</span><span style="color:#000000">；
</span><span style="color:#008080">35</span>         <span style="color:#0000ff">virtual</span> <span style="color:#0000ff">void</span> Show( )=<span style="color:#800080">0</span><span style="color:#000000">；
</span><span style="color:#008080">36</span>         <span style="color:#0000ff">virtual</span> <span style="color:#0000ff">void</span>  setColor(std::<span style="color:#0000ff">string</span> color )=<span style="color:#800080">0</span><span style="color:#000000">;
</span><span style="color:#008080">37</span>         <span style="color:#0000ff">virtual</span> ~<span style="color:#000000">Car( ){}
</span><span style="color:#008080">38</span>     <span style="color:#0000ff">protected</span><span style="color:#000000">:
</span><span style="color:#008080">39</span>         std::<span style="color:#0000ff">string</span><span style="color:#000000"> _color;
</span><span style="color:#008080">40</span>         <span style="color:#008000">//</span><span style="color:#008000">有一个资源</span>
<span style="color:#008080">41</span>         wheel*<span style="color:#000000"> _wheel;
</span><span style="color:#008080">42</span>         std::<span style="color:#0000ff">string</span><span style="color:#000000"> _engine;
</span><span style="color:#008080">43</span> <span style="color:#000000">};
</span><span style="color:#008080">44</span> 
<span style="color:#008080">45</span> <span style="color:#0000ff">class</span> BenzCar:<span style="color:#0000ff">public</span><span style="color:#000000"> Car
</span><span style="color:#008080">46</span> <span style="color:#000000">{
</span><span style="color:#008080">47</span>     <span style="color:#0000ff">public</span><span style="color:#000000">:
</span><span style="color:#008080">48</span>         BenzCar(std::<span style="color:#0000ff">string</span> color,wheel *w,std::<span style="color:#0000ff">string</span><span style="color:#000000"> engine)
</span><span style="color:#008080">49</span> <span style="color:#000000">        :Car(color,w,engine)
</span><span style="color:#008080">50</span> <span style="color:#000000">        { }
</span><span style="color:#008080">51</span>         ~<span style="color:#000000">BenzCar( );
</span><span style="color:#008080">52</span>         <span style="color:#0000ff">void</span><span style="color:#000000"> Show( );
</span><span style="color:#008080">53</span>         Car *<span style="color:#000000"> Clone( );
</span><span style="color:#008080">54</span>         <span style="color:#0000ff">void</span> setColor( std::<span style="color:#0000ff">string</span><span style="color:#000000"> color );
</span><span style="color:#008080">55</span> <span style="color:#000000">};
</span><span style="color:#008080">56</span> 
<span style="color:#008080">57</span> BenzCar::~<span style="color:#000000">BenzCar( )
</span><span style="color:#008080">58</span> <span style="color:#000000">{
</span><span style="color:#008080">59</span> <span style="color:#000000">    delete _wheel;
</span><span style="color:#008080">60</span> <span style="color:#000000">}
</span><span style="color:#008080">61</span> Car*<span style="color:#000000"> BenzCar::Clone( )
</span><span style="color:#008080">62</span> <span style="color:#000000">{
</span><span style="color:#008080">63</span>     wheel* l=<span style="color:#000000">_wheel.Clone( );   
</span><span style="color:#008080">64</span>     Car * pc=<span style="color:#0000ff">new</span><span style="color:#000000"> BenzCar(_color,l, _engine );
</span><span style="color:#008080">65</span>     <span style="color:#0000ff">return</span><span style="color:#000000"> pc;
</span><span style="color:#008080">66</span> <span style="color:#000000">}
</span><span style="color:#008080">67</span> <span style="color:#0000ff">void</span><span style="color:#000000"> BenzCar::Show( )
</span><span style="color:#008080">68</span> <span style="color:#000000">{
</span><span style="color:#008080">69</span>     std::cout&lt;&lt;<span style="color:#800000">&quot;</span><span style="color:#800000">The car's color is</span><span style="color:#800000">&quot;</span>&lt;&lt;_color&lt;&lt;<span style="color:#000000">std::endl;
</span><span style="color:#008080">70</span> <span style="color:#000000">    _wheel.show( );
</span><span style="color:#008080">71</span>     std::cout&lt;&lt;<span style="color:#800000">&quot;</span><span style="color:#800000">The car's engine is</span><span style="color:#800000">&quot;</span>&lt;&lt;_engine&lt;&lt;<span style="color:#000000">std::endl;
</span><span style="color:#008080">72</span> <span style="color:#000000">}
</span><span style="color:#008080">73</span> 
<span style="color:#008080">74</span> <span style="color:#0000ff">void</span> BenzCar::setColor(std::<span style="color:#0000ff">string</span><span style="color:#000000"> color )
</span><span style="color:#008080">75</span> <span style="color:#000000">{
</span><span style="color:#008080">76</span>     _color=<span style="color:#000000">color;
</span><span style="color:#008080">77</span> <span style="color:#000000">}
</span><span style="color:#008080">78</span> 
<span style="color:#008080">79</span> <span style="color:#0000ff">int</span> main(<span style="color:#0000ff">int</span> argc,<span style="color:#0000ff">char</span> **<span style="color:#000000"> argv)
</span><span style="color:#008080">80</span> <span style="color:#000000">{
</span><span style="color:#008080">81</span>     wheel *l=<span style="color:#0000ff">new</span> wheel(<span style="color:#800000">&quot;</span><span style="color:#800000">michelin</span><span style="color:#800000">&quot;</span>,<span style="color:#800080">160</span><span style="color:#000000">);
</span><span style="color:#008080">82</span>     BenzCar bc(<span style="color:#800000">&quot;</span><span style="color:#800000">red</span><span style="color:#800000">&quot;</span>,l,<span style="color:#800000">&quot;</span><span style="color:#800000">made in China</span><span style="color:#800000">&quot;</span><span style="color:#000000">);
</span><span style="color:#008080">83</span>     std::auto_ptr&lt;Car&gt;<span style="color:#000000"> pc(bc.Clone( ));
</span><span style="color:#008080">84</span>     pc-<span style="color:#0000ff">set</span>(<span style="color:#800000">&quot;</span><span style="color:#800000">white</span><span style="color:#800000">&quot;</span><span style="color:#000000">);
</span><span style="color:#008080">85</span>     pc-&gt;<span style="color:#000000">Show( );
</span><span style="color:#008080">86</span>     bc-&gt;<span style="color:#000000">Show( );
</span><span style="color:#008080">87</span>     <span style="color:#0000ff">return</span> <span style="color:#800080">0</span><span style="color:#000000">;
</span><span style="color:#008080">88</span> }</pre>
</div>
<p><span style="font-family:仿宋; font-size:16px">运行结果：</span></p>
<p><img src="http://pic002.cnblogs.com/images/2012/32873/2012121322563925.jpg" alt=""></p>
</div>
</div>

</div>

<div class="share_buttons" id="sharePanel"></div>
<!--192.168.100.33-->
<div class="article_next_prev">
    <li class="prev_article"><span>上一篇：</span><a href="/couhujia/article/details/8365256">builder pattern--建造者模式</a></li>
    <li class="next_article"><span>下一篇：</span><a href="/couhujia/article/details/8365259">adapter pattern--适配器模式</a></li>
</div>


    
</div>
<div id="ad_cen">
<script type="text/javascript" >BAIDU_CLB_SLOT_ID = "117306";</script>
<script type="text/javascript" src="http://cbjs.baidu.com/js/o.js"></script>
</div>
<script type="text/javascript">
    //new Ad(4, 'ad_cen');
</script>
<div id="comment_title" class="panel_head">查看评论<a name="comments"></a></div>
<div id="comment_list"></div>
<div id="comment_bar"></div>
<div id="comment_form"></div>
<div class="announce">* 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场<a name="reply"></a><a name="quote"></a></div>
<script type="text/javascript">
    var fileName = '8365258';
    var commentscount = 0;
    var islock = false
</script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/comment.js"></script>
<div id="ad_bot"></div>
<script type="text/javascript">
    new Ad(5, 'ad_bot');
</script>
<div id="report_dialog"></div>

<div id="d-top" style="display:none;">
<a id="d-top-a" href="#" title="回到顶部">
<img src="http://static.blog.csdn.net/images/top.png" alt="TOP" /></a>
</div>
<script type="text/javascript">
    $(function(){
        var d_top=$('#d-top');
        document.onscroll=function(){
            var scrTop=(document.body.scrollTop||document.documentElement.scrollTop);
            if(scrTop>500){
                d_top.show();
            }else{
                d_top.hide();
            }
        }
        $('#d-top-a').click(function(){
            scrollTo(0,0);
            this.blur();
            return false;
        });
    });
</script>

<div class="clear"></div>
</div>
</div>

<div id="side">
<div class="side">
<div id="panel_Profile" class="panel">
<ul class="panel_head"><span>个人资料</span></ul>
<ul class="panel_body profile">
<div id="blog_userface">
    <a href="http://my.csdn.net/couhujia" target="_blank">
    <img src="http://avatar.csdn.net/1/D/8/1_couhujia.jpg" title="访问我的空间" style="max-width:90%"/>
    </a>
    <br />
    <span><a href="http://my.csdn.net/couhujia" class="user_name" target="_blank">couhujia</a></span>
</div>
<div class="interact">
<a href="javascript:void(0);" class="attent" id="span_add_follow" title="[加关注]"></a>
<a href="javascript:void(0);" class="letter" onclick="loginto(1)" title="[发私信]"></a>
</div>
<div id="blog_medal">
</div>
<ul id="blog_rank">
    <li>访问：<span>10480次</span></li>
    <li>积分：<span>451分</span></li>
    <li>排名：<span>千里之外</span></li>
</ul>
<ul id="blog_statistics">
    <li>原创：<span>25篇</span></li>
    <li>转载：<span>0篇</span></li>
    <li>译文：<span>0篇</span></li>
    <li>评论：<span>35条</span></li>
</ul>
</ul>
</div>

<div class="panel">
<ul class="panel_body" style="padding:0;">
<script type="text/javascript" src="http://cbjs.baidu.com/js/m.js"></script> 
<script type="text/javascript"> 
BAIDU_CLB_preloadSlots("724643","117306"); 
</script>
<script type="text/javascript">BAIDU_CLB_fillSlot("724643");</script> 
</ul>
</div>
<div class="panel" id="panel_Search">
    <ul class="panel_head"><span>文章搜索</span></ul>
    <ul class="panel_body">
        <form id="frmSearch" action="http://so.csdn.net/search" class="form_search" target="_blank">
        <span><input id="inputSearch" type="text" class="blogsearch" title="请输入关键字" /></span>
        <input id="btnSubmit" type="submit" value="搜索" title="search in blog" />
        <input type="hidden" name="q" id="inputQ" />
        <input type="hidden" name="t" value="blog" />
        <a id="btnSearchBlog" target="_blank"></a>
        </form>
    </ul>
</div><div id="panel_Category" class="panel">
<ul class="panel_head"><span>文章分类</span></ul>
<ul class="panel_body">
<li>
<a href="http://blog.csdn.net/couhujia/article/category/1310128">C++基础</a><span>(8)</span>
</li>
<li>
<a href="http://blog.csdn.net/couhujia/article/category/1310130">设计模式</a><span>(14)</span>
</li>
<li>
<a href="http://blog.csdn.net/couhujia/article/category/1310434">c++</a><span>(3)</span>
</li>
</ul>
</div><div id="panel_Archive" class="panel">
<ul class="panel_head"><span>文章存档</span></ul>
<ul class="panel_body">
<div id="archive_list">
<!--归档统计-->
<li><a href="http://blog.csdn.net/couhujia/article/month/2013/01">2013年01月</a><span>(7)</span></li><li><a href="http://blog.csdn.net/couhujia/article/month/2012/12">2012年12月</a><span>(18)</span></li>
</div>
</ul>
</div>
<div id="hotarticls" class="panel">
<ul class="panel_head"><span>阅读排行</span></ul>
<ul class="panel_body itemlist">
<li>
<a href="/couhujia/article/details/8474905" title="怎么有效的防止内存泄漏">怎么有效的防止内存泄漏</a><span>(5043)</span>
</li>
<li>
<a href="/couhujia/article/details/8484226" title="flyweight pattern -- 享元模式">flyweight pattern -- 享元模式</a><span>(403)</span>
</li>
<li>
<a href="/couhujia/article/details/8477986" title="facade pattern--外观模式">facade pattern--外观模式</a><span>(381)</span>
</li>
<li>
<a href="/couhujia/article/details/8492296" title="proxy patter --代理模式">proxy patter --代理模式</a><span>(362)</span>
</li>
<li>
<a href="/couhujia/article/details/8487358" title="c++多态深入分析--单继承">c++多态深入分析--单继承</a><span>(326)</span>
</li>
<li>
<a href="/couhujia/article/details/8499642" title="Chain of Responsibility -- 责任链模式">Chain of Responsibility -- 责任链模式</a><span>(312)</span>
</li>
<li>
<a href="/couhujia/article/details/8543628" title="command pattern -- 命令模式">command pattern -- 命令模式</a><span>(298)</span>
</li>
<li>
<a href="/couhujia/article/details/8365252" title="singleton pattern--单件模式">singleton pattern--单件模式</a><span>(263)</span>
</li>
<li>
<a href="/couhujia/article/details/8365249" title="C++文件依存关系">C++文件依存关系</a><span>(210)</span>
</li>
<li>
<a href="/couhujia/article/details/8365263" title="decorator pattern -- 装饰模式">decorator pattern -- 装饰模式</a><span>(209)</span>
</li>
</ul>
</div>
<div id="hotarticls2" class="panel">
<ul class="panel_head"><span>评论排行</span></ul>
<ul class="panel_body itemlist">
<li>
<a href="/couhujia/article/details/8474905" title="怎么有效的防止内存泄漏">怎么有效的防止内存泄漏</a><span>(22)</span>
</li>
<li>
<a href="/couhujia/article/details/8484226" title="flyweight pattern -- 享元模式">flyweight pattern -- 享元模式</a><span>(6)</span>
</li>
<li>
<a href="/couhujia/article/details/8365249" title="C++文件依存关系">C++文件依存关系</a><span>(2)</span>
</li>
<li>
<a href="/couhujia/article/details/8499642" title="Chain of Responsibility -- 责任链模式">Chain of Responsibility -- 责任链模式</a><span>(2)</span>
</li>
<li>
<a href="/couhujia/article/details/8492296" title="proxy patter --代理模式">proxy patter --代理模式</a><span>(2)</span>
</li>
<li>
<a href="/couhujia/article/details/8365252" title="singleton pattern--单件模式">singleton pattern--单件模式</a><span>(1)</span>
</li>
<li>
<a href="/couhujia/article/details/8365260" title="bridge pattern -- 桥接模式">bridge pattern -- 桥接模式</a><span>(0)</span>
</li>
<li>
<a href="/couhujia/article/details/8365261" title="composite pattern -- 组合模式">composite pattern -- 组合模式</a><span>(0)</span>
</li>
<li>
<a href="/couhujia/article/details/8365263" title="decorator pattern -- 装饰模式">decorator pattern -- 装饰模式</a><span>(0)</span>
</li>
<li>
<a href="/couhujia/article/details/8365243" title="#include是怎么样工作的？">#include是怎么样工作的？</a><span>(0)</span>
</li>
</ul>
</div>
<div id="newcomments" class="panel">
<ul class="panel_head"><span>最新评论</span></ul>
<ul class="panel_body itemlist">
    <li>
    <a href="/couhujia/article/details/8474905#comments">怎么有效的防止内存泄漏</a>
    <p style="margin:0px;"><a href="/yangxiaoluck" class="user_name">yangxiaoluck</a>:
嗯，任何要分配空间的地方其实都需要去try住，不仅仅是构造函数里面。
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8365252#comments">singleton pattern--单件模式</a>
    <p style="margin:0px;"><a href="/fanzheng220112583" class="user_name">fanzheng220112583</a>:
你的这些方法模式的术语从何而来？感觉C++中，不同人用的术语太过于烦杂，没有统一性。。。
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8365249#comments">C++文件依存关系</a>
    <p style="margin:0px;"><a href="/Blues1021" class="user_name">Blues1021</a>:
把1000个文件分成几个模块做成DLL,不必生成一个巨型的.obj，也就不需要这样别有用心的设计了吧...
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8474905#comments">怎么有效的防止内存泄漏</a>
    <p style="margin:0px;"><a href="/lanbinbin1986129" class="user_name">lanbinbin1986129</a>:
这种方法确实不错，以前都是这样去解决这个问题：Image* GetImage(){if(pImg =...
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8474905#comments">怎么有效的防止内存泄漏</a>
    <p style="margin:0px;"><a href="/qiaojava1" class="user_name">qiaojava1</a>:
嗯,挺有用的~~
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8499642#comments">Chain of Responsibility -- 责任链模式</a>
    <p style="margin:0px;"><a href="/xzshen2011" class="user_name">xzshen2011</a>:
我们来实现这一场景吧
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8474905#comments">怎么有效的防止内存泄漏</a>
    <p style="margin:0px;"><a href="/hanmingjun" class="user_name">hanmingjun</a>:
没记错的话，好像exception c++里面有更好的方法哎
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8499642#comments">Chain of Responsibility -- 责任链模式</a>
    <p style="margin:0px;"><a href="/wwwsily" class="user_name">wwwsily</a>:
厉害 学习了
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8474905#comments">怎么有效的防止内存泄漏</a>
    <p style="margin:0px;"><a href="/dyx1024" class="user_name">dyx1024</a>:
对于这种场景 ，我通常的做法是，分配完后立刻检查是否分配成功，如上，pImg成功，但pVoi没成功，...
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8492296#comments">proxy patter --代理模式</a>
    <p style="margin:0px;"><a href="/shen823797837" class="user_name">shen823797837</a>:
貌似代理类里面的对象漏掉了吧？不然怎么知道要代理谁呢？
    </p>
    </li>
</ul>
</div>
</div>
<div class="clear"></div>
</div>

<div class="clear"></div>
</div>

<script type="text/javascript" src="http://static.blog.csdn.net/scripts/newblog.min.js?v=1.1"></script>
<script type="text/javascript" src="http://medal.blog.csdn.net/showblogmedal.ashx?blogid=691650"></script>

<script type="text/javascript">
document.write('<script type="text/javascript" src="http://csdnimg.cn/pubfooter/js/publib_footer.js?' + Math.floor(new Date()/120000).toString(36) + '="></'+'script>');
</script>

<script type="text/javascript" src="http://passport.csdn.net/content/loginbox/login.js"></script>
<script type="text/javascript">document.write("<img src=http://counter.csdn.net/pv.aspx?id=24 border=0 width=0 height=0>");</script>
<script type="text/javascript" src="http://www.csdn.net/ui/scripts/Csdn/counter.js?v=1"></script>


<script type="text/javascript" src="http://ad.csdn.net/scripts/ad-blog.js"></script>

<script type="text/javascript" src="http://zz.csdn.net/js/count.js"></script>

</div>
</body>
</html>