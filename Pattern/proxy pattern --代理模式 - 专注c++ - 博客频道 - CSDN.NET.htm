<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>proxy patter --代理模式 - 专注c++ - 博客频道 - CSDN.NET</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="description" content="对于复杂的软件系统常常有一种处理手法，即增加一层间接层，从而使得系统获得一种更为灵活、满足特定需求的解决方案。在面向对象的系统中，有些对象由于某种原因，比如对象创建的开销很大，或者某些操作需要安全控制，或者需要进程外的访问等，直接访问会给使用者或者系统结构带来很多麻烦。Proxy设计模式就是在不失去透明操作对象的同时，通过增加一层间接层来管理、控制这些对象特有的复杂性。// Pro" />
<script src="http://static.blog.csdn.net/scripts/jquery.js" type="text/javascript"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/ad.js?v=1.1"></script>
<link rel="Stylesheet" type="text/css" href="http://static.blog.csdn.net/skin/dark1/css/style.css?v=1.1" />
<link id="RSSLink" title="RSS" type="application/rss+xml" rel="alternate" href="/couhujia/rss/list" />
<link rel="shortcut icon" href="/favicon.ico" />
<link type="text/css" rel="stylesheet" href="http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/default.css" />
</head>
<body>
<script src="http://csdnimg.cn/pubnav/js/pub_topnav_2011.js"type="text/javascript"></script>

<div id="container">
<div id="header">
    <div class="header">
        <div id="blog_title">
            <h1><a href="http://blog.csdn.net/couhujia">专注c++</a></h1>
            <h2>不积跬步无以至千里，不积小流无以成江海</h2>
            <div class="clear"></div>
        </div>
        <div class="clear"></div>
    </div>
</div>
<div id="navigator">
    <div class="navigator_bg"></div>
    <div class="navigator">
        <ul>
            <li id="btnContents"><a href="http://blog.csdn.net/couhujia?viewmode=contents"><span><img src="http://static.blog.csdn.net/images/ico_list.gif">目录视图</span></a></li>
            <li id="btnView"><a href="http://blog.csdn.net/couhujia?viewmode=list"><span><img src="http://static.blog.csdn.net/images/ico_summary.gif">摘要视图</span></a></li>
            <li id="btnRss"><a href="http://blog.csdn.net/couhujia/rss/list"><span><img src="http://static.blog.csdn.net/images/ico_rss.gif">订阅</span></a></li>
</ul>
    </div>
</div>
<script type="text/javascript">
    var username = "couhujia";
    var _blogger = username;
    var blog_address = "http://blog.csdn.net/couhujia";
    var static_host = "http://static.blog.csdn.net";
    var currentUserName = "";
</script>

<div id="body">
<div id="main">
<div class="main">
<div class="notice"> 

<a href="https://code.csdn.net/blog/12" target="_blank">
<font color=red>公告：博客新增直接引用代码功能</font></a>



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

<a href="http://www.csdn.net/article/2013-07-24/2816320" target="_blank"><font color=blue>专访谭海燕：移动互联网开发的那些事
</font></a>

&nbsp;&nbsp;&nbsp;&nbsp;

<a href="http://blog.csdn.net/csdnproduct/article/details/9495139
"target="_blank">
<font color=red>CSDN博客频道自定义域名、标签搜索功能上线啦！


 </font></a>

&nbsp;&nbsp;&nbsp;&nbsp;

<a href="http://blog.csdn.net/adali/article/details/9813651"target="_blank">
<font color=blue>独一无二的职位：开源社区经理 
 </font></a>




</div>
<div id="article_details" class="details">
    <div class="article_title">
    <span class="ico ico_type_Original"></span>
    <h3>
        <span class="link_title"><a href="/couhujia/article/details/8492296">
        proxy patter --代理模式
        </a></span>
    </h3>
</div>

        
    <div class="article_manage">
        <span class="link_categories">
        分类：
            <a href="/couhujia/article/category/1310130">设计模式</a> 
        </span>
    <span class="link_postdate">2013-01-11 09:55</span>
    <span class="link_view" title="阅读次数">364人阅读</span>
    <span class="link_comments" title="评论次数"><a href="#comments">评论</a>(2)</span>
    <span class="link_collect"><a href="javascript:void(0);" onclick="javascript:collectArticle('proxy patter --代理模式','8492296');return false;" title="收藏">收藏</a></span>
    <span class="link_report"><a href="#report"  onclick="javascript:report(8492296,2);return false;" title="举报">举报</a></span>
    
</div>
<div class="tag2box"><a href='http://blog.csdn.net/tag/details.html?tag=%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f' target=_blank>设计模式</a></div>


    
<div id="article_content" class="article_content">

<div style=""><span style="line-height:21px"><span style="font-family:Microsoft YaHei; font-size:16px">对于复杂的软件系统常常有一种处理手法，即增加一层间接层，从而使得系统获得一种更为灵活、满足特定需求的解决方案。在面向对象的系统中，有些对象由于某种原因，比如对象创建的开销很大，或者某些操作需要安全控制，或者需要进程外的访问等，直接访问会给使用者或者系统结构带来很多麻烦。</span></span></div>
<div style=""><span style="font-family:Microsoft YaHei; font-size:16px"><span lang="EN-US" style="line-height:21px">Proxy</span><span style="line-height:21px">设计模式就是在不失去透明操作对象的同时，通过增加一层间接层来管理、控制这些对象特有的复杂性。</span></span></div>
<div style="font-size:16px"><span style="font-size:16px"><span style="font-family:Microsoft YaHei"><span style="line-height:21px"><img src="http://img.my.csdn.net/uploads/201301/11/1357869106_6615.png" alt=""><br>
</span></span></span></div>
<div><span style="font-size:14px"><span style="font-family:Microsoft YaHei"><span style="line-height:21px"></span></span></span><pre name="code" class="cpp" style="font-size: 14px;">// Proxy.h
#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
 
class IEmployee
{
public:
         virtual string get_name(int ID) = 0;
         virtual int get_age(int ID) = 0;
         virtual double get_salary(int ID) = 0;
 
public:
         virtual ~IEmployee();
};
 
IEmployee::~IEmployee()
{
         cout &lt;&lt; &quot;in the destructor of IEmployee...&quot; &lt;&lt; endl;
}
 
class Employee : public IEmployee
{
public:
         string get_name(int ID);
         int get_age(int ID);
         double get_salary(int ID);
         ~Employee();
};
 
string Employee::get_name(int ID)
{
         // ... 假定此处查询数据库，获得ID对应员工的姓名
         string name = &quot;tom&quot;;
         return name;
}
 
int Employee::get_age(int ID)
{
         // ... 假定此处查询数据库，获得ID对应员工的年龄
         int age = 20;
         return age;
}
 
double Employee::get_salary(int ID)
{
         // ... 假定此处查询数据库，获得ID对应员工的工资
         double salary = 100000.00;
         return salary;
}
 
Employee::~Employee()
{
         cout &lt;&lt; &quot;in the destructor of Employee...&quot; &lt;&lt; endl;
}
 
//代理
class EmployeeProxy : public IEmployee
{
public:
         string get_name(int ID);
         int get_age(int ID);
         double get_salary(int ID);
         ~EmployeeProxy();
};
 
string EmployeeProxy::get_name(int ID)
{
         // ...假定此处通过socket或者RPC等其他方式访问Employee中的get_name(int ID)方法，并接受相应的返回值
         string name = &quot;tom&quot;;
         return name;
}
 
int EmployeeProxy::get_age(int ID)
{
         // ...假定此处通过socket或者RPC等其他方式访问Employee中的get_age(int ID)方法，并接受相应的返回值
         int age = 20;
         return age;
}
 
double EmployeeProxy::get_salary(int ID)
{
         // ...假定此处通过socket或者RPC等其他方式访问Employee中的get_salary(int ID)方法，并接受相应的返回值
         double salary = 100000.00;
         return salary;
}
 
EmployeeProxy::~EmployeeProxy()
{
         cout &lt;&lt; &quot;in the destructor of EmployeeProxy...&quot; &lt;&lt; endl;
}
 
// Proxy.cpp
#include &quot;Proxy.h&quot;
 
int main(int argc, char **argv)
{
         IEmployee *employee = new EmployeeProxy;
         cout &lt;&lt; employee-&gt;get_name(10) &lt;&lt; endl;
         cout &lt;&lt; employee-&gt;get_age(10) &lt;&lt; endl;
         cout &lt;&lt; employee-&gt;get_salary(10) &lt;&lt; endl;
         delete employee;
 
         return 0;
}
</pre>
<div><br>
</div>
<pre style="white-space:pre-wrap; word-wrap:break-word; line-height:26px; margin-top:0px; margin-bottom:0px"><span style="font-family:Microsoft YaHei; font-size:16px">如果有兴趣可以继续浏览该系列文章：</span></pre>
<pre style="font-size:14px; white-space:pre-wrap; word-wrap:break-word; line-height:26px; background-color:rgb(255,255,255); margin-top:0px; margin-bottom:0px"><pre style="white-space:pre-wrap; word-wrap:break-word; background-color:rgb(255,255,255); margin-top:0px; margin-bottom:0px"><pre style="white-space:pre-wrap; word-wrap:break-word; margin-top:0px; margin-bottom:0px"><a href="http://blog.csdn.net/couhujia/article/details/8365252" style="color:rgb(202,0,0); text-decoration:initial"><span style="font-family:'Microsoft YaHei'; color:rgb(51,51,255); font-size:16px">singleton pattern--单件模式</span></a></pre><pre style="white-space:pre-wrap; word-wrap:break-word; margin-top:0px; margin-bottom:0px"><a href="http://blog.csdn.net/couhujia/article/details/8365253" style="color:rgb(202,0,0); text-decoration:initial"><span style="font-family:'Microsoft YaHei'; color:rgb(51,51,255); font-size:16px">factory mothed pattern--工厂方法模式</span></a></pre><pre style="white-space:pre-wrap; word-wrap:break-word; margin-top:0px; margin-bottom:0px"><a href="http://blog.csdn.net/couhujia/article/details/8365254" style="color:rgb(202,0,0); text-decoration:initial"><span style="font-family:'Microsoft YaHei'; color:rgb(51,51,255); font-size:16px">abstract factory pattern--抽象工厂模式</span></a></pre><pre style="white-space:pre-wrap; word-wrap:break-word; margin-top:0px; margin-bottom:0px"><a href="http://blog.csdn.net/couhujia/article/details/8365256" style="color:rgb(202,0,0); text-decoration:initial"><span style="font-family:'Microsoft YaHei'; color:rgb(51,51,255); font-size:16px">builder pattern--建造者模式</span></a></pre><pre style="white-space:pre-wrap; word-wrap:break-word; margin-top:0px; margin-bottom:0px"><a href="http://blog.csdn.net/couhujia/article/details/8365258" style="color:rgb(202,0,0); text-decoration:initial"><span style="font-family:'Microsoft YaHei'; color:rgb(51,51,255); font-size:16px">prototype pattern--原型模式</span></a></pre><pre style="white-space:pre-wrap; word-wrap:break-word; margin-top:0px; margin-bottom:0px"><a href="http://blog.csdn.net/couhujia/article/details/8365259" style="color:rgb(202,0,0); text-decoration:initial"><span style="font-family:'Microsoft YaHei'; color:rgb(51,51,255); font-size:16px">adapter pattern--适配器模式</span></a></pre><pre style="white-space:pre-wrap; word-wrap:break-word; margin-top:0px; margin-bottom:0px"><a href="http://blog.csdn.net/couhujia/article/details/8365260" style="color:rgb(202,0,0); text-decoration:initial"><span style="font-family:'Microsoft YaHei'; color:rgb(51,51,255); font-size:16px">bridge pattern -- 桥接模式</span></a>
</pre><pre style="white-space:pre-wrap; word-wrap:break-word; margin-top:0px; margin-bottom:0px"><div style="white-space:normal"></div></pre><pre style="white-space:pre-wrap; word-wrap:break-word; margin-top:0px; margin-bottom:0px"><a href="http://blog.csdn.net/couhujia/article/details/8365261" style="color:rgb(202,0,0); text-decoration:initial"><span style="font-family:'Microsoft YaHei'; color:rgb(51,51,255); font-size:16px">composite pattern -- 组合模式</span></a></pre><pre style="white-space:pre-wrap; word-wrap:break-word; margin-top:0px; margin-bottom:0px"><a href="http://blog.csdn.net/couhujia/article/details/8365263" style="color:rgb(202,0,0); text-decoration:initial"><span style="font-family:'Microsoft YaHei'; color:rgb(51,51,255); font-size:16px">decorator pattern -- 装饰模式</span></a></pre></pre><a href="http://blog.csdn.net/couhujia/article/details/8484226" target="_blank" style="color:rgb(202,0,0); text-decoration:initial; list-style:none; word-break:break-all; word-wrap:break-word"><span style="font-family:'Microsoft YaHei'; font-size:16px; color:rgb(51,51,255)">flyweight pattern -- 享元模式</span></a></pre>
<a href="http://blog.csdn.net/couhujia/article/details/8492296" style="text-decoration:initial; line-height:30px"><span style="font-family:Microsoft YaHei; font-size:16px; color:#3333ff">proxy patter --代理模式&nbsp;</span></a><br>
</div>

</div>

<div class="share_buttons" id="sharePanel"></div>
<!--192.168.100.34-->
<div class="article_next_prev">
    <li class="prev_article"><span>上一篇：</span><a href="/couhujia/article/details/8484226">flyweight pattern -- 享元模式</a></li>
    <li class="next_article"><span>下一篇：</span><a href="/couhujia/article/details/8499642">Chain of Responsibility -- 责任链模式</a></li>
</div>


            <div id="digg" ArticleId="8492296">
            <dl id="btnDigg" class="digg digg_disable">
                <dt>顶</dt>
                <dd>7</dd>
            </dl>
            <dl id="btnBury" class="digg digg_disable">
                <dt>踩</dt>
                <dd>0</dd>
            </dl>
        </div>

</div>
<div id="ad_cen">
<script type="text/javascript" >BAIDU_CLB_SLOT_ID = "117306";</script>
<script type="text/javascript" src="http://cbjs.baidu.com/js/o.js"></script>
</div>
<script type="text/javascript">
    //new Ad(4, 'ad_cen');
</script>
<div id="comment_title" class="panel_head">查看评论<a name="comments"></a></div>
<div id="comment_list"></div>
<div id="comment_bar"></div>
<div id="comment_form"></div>
<div class="announce">* 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场<a name="reply"></a><a name="quote"></a></div>
<script type="text/javascript">
    var fileName = '8492296';
    var commentscount = 2;
    var islock = false
</script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/comment.js"></script>
<div id="ad_bot"></div>
<script type="text/javascript">
    new Ad(5, 'ad_bot');
</script>
<div id="report_dialog"></div>

<div id="d-top" style="display:none;">
<a id="d-top-a" href="#" title="回到顶部">
<img src="http://static.blog.csdn.net/images/top.png" alt="TOP" /></a>
</div>
<script type="text/javascript">
    $(function(){
        var d_top=$('#d-top');
        document.onscroll=function(){
            var scrTop=(document.body.scrollTop||document.documentElement.scrollTop);
            if(scrTop>500){
                d_top.show();
            }else{
                d_top.hide();
            }
        }
        $('#d-top-a').click(function(){
            scrollTo(0,0);
            this.blur();
            return false;
        });
    });
</script>

<div class="clear"></div>
</div>
</div>

<div id="side">
<div class="side">
<div id="panel_Profile" class="panel">
<ul class="panel_head"><span>个人资料</span></ul>
<ul class="panel_body profile">
<div id="blog_userface">
    <a href="http://my.csdn.net/couhujia" target="_blank">
    <img src="http://avatar.csdn.net/1/D/8/1_couhujia.jpg" title="访问我的空间" style="max-width:90%"/>
    </a>
    <br />
    <span><a href="http://my.csdn.net/couhujia" class="user_name" target="_blank">couhujia</a></span>
</div>
<div class="interact">
<a href="javascript:void(0);" class="attent" id="span_add_follow" title="[加关注]"></a>
<a href="javascript:void(0);" class="letter" onclick="loginto(1)" title="[发私信]"></a>
</div>
<div id="blog_medal">
</div>
<ul id="blog_rank">
    <li>访问：<span>10488次</span></li>
    <li>积分：<span>451分</span></li>
    <li>排名：<span>千里之外</span></li>
</ul>
<ul id="blog_statistics">
    <li>原创：<span>25篇</span></li>
    <li>转载：<span>0篇</span></li>
    <li>译文：<span>0篇</span></li>
    <li>评论：<span>35条</span></li>
</ul>
</ul>
</div>

<div class="panel">
<ul class="panel_body" style="padding:0;">
<script type="text/javascript" src="http://cbjs.baidu.com/js/m.js"></script> 
<script type="text/javascript"> 
BAIDU_CLB_preloadSlots("724643","117306"); 
</script>
<script type="text/javascript">BAIDU_CLB_fillSlot("724643");</script> 
</ul>
</div>
<div class="panel" id="panel_Search">
    <ul class="panel_head"><span>文章搜索</span></ul>
    <ul class="panel_body">
        <form id="frmSearch" action="http://so.csdn.net/search" class="form_search" target="_blank">
        <span><input id="inputSearch" type="text" class="blogsearch" title="请输入关键字" /></span>
        <input id="btnSubmit" type="submit" value="搜索" title="search in blog" />
        <input type="hidden" name="q" id="inputQ" />
        <input type="hidden" name="t" value="blog" />
        <a id="btnSearchBlog" target="_blank"></a>
        </form>
    </ul>
</div><div id="panel_Category" class="panel">
<ul class="panel_head"><span>文章分类</span></ul>
<ul class="panel_body">
<li>
<a href="http://blog.csdn.net/couhujia/article/category/1310128">C++基础</a><span>(8)</span>
</li>
<li>
<a href="http://blog.csdn.net/couhujia/article/category/1310130">设计模式</a><span>(14)</span>
</li>
<li>
<a href="http://blog.csdn.net/couhujia/article/category/1310434">c++</a><span>(3)</span>
</li>
</ul>
</div><div id="panel_Archive" class="panel">
<ul class="panel_head"><span>文章存档</span></ul>
<ul class="panel_body">
<div id="archive_list">
<!--归档统计-->
<li><a href="http://blog.csdn.net/couhujia/article/month/2013/01">2013年01月</a><span>(7)</span></li><li><a href="http://blog.csdn.net/couhujia/article/month/2012/12">2012年12月</a><span>(18)</span></li>
</div>
</ul>
</div>
<div id="hotarticls" class="panel">
<ul class="panel_head"><span>阅读排行</span></ul>
<ul class="panel_body itemlist">
<li>
<a href="/couhujia/article/details/8474905" title="怎么有效的防止内存泄漏">怎么有效的防止内存泄漏</a><span>(5045)</span>
</li>
<li>
<a href="/couhujia/article/details/8484226" title="flyweight pattern -- 享元模式">flyweight pattern -- 享元模式</a><span>(403)</span>
</li>
<li>
<a href="/couhujia/article/details/8477986" title="facade pattern--外观模式">facade pattern--外观模式</a><span>(381)</span>
</li>
<li>
<a href="/couhujia/article/details/8492296" title="proxy patter --代理模式">proxy patter --代理模式</a><span>(364)</span>
</li>
<li>
<a href="/couhujia/article/details/8487358" title="c++多态深入分析--单继承">c++多态深入分析--单继承</a><span>(326)</span>
</li>
<li>
<a href="/couhujia/article/details/8499642" title="Chain of Responsibility -- 责任链模式">Chain of Responsibility -- 责任链模式</a><span>(312)</span>
</li>
<li>
<a href="/couhujia/article/details/8543628" title="command pattern -- 命令模式">command pattern -- 命令模式</a><span>(298)</span>
</li>
<li>
<a href="/couhujia/article/details/8365252" title="singleton pattern--单件模式">singleton pattern--单件模式</a><span>(263)</span>
</li>
<li>
<a href="/couhujia/article/details/8365249" title="C++文件依存关系">C++文件依存关系</a><span>(210)</span>
</li>
<li>
<a href="/couhujia/article/details/8365263" title="decorator pattern -- 装饰模式">decorator pattern -- 装饰模式</a><span>(209)</span>
</li>
</ul>
</div>
<div id="hotarticls2" class="panel">
<ul class="panel_head"><span>评论排行</span></ul>
<ul class="panel_body itemlist">
<li>
<a href="/couhujia/article/details/8474905" title="怎么有效的防止内存泄漏">怎么有效的防止内存泄漏</a><span>(22)</span>
</li>
<li>
<a href="/couhujia/article/details/8484226" title="flyweight pattern -- 享元模式">flyweight pattern -- 享元模式</a><span>(6)</span>
</li>
<li>
<a href="/couhujia/article/details/8365249" title="C++文件依存关系">C++文件依存关系</a><span>(2)</span>
</li>
<li>
<a href="/couhujia/article/details/8499642" title="Chain of Responsibility -- 责任链模式">Chain of Responsibility -- 责任链模式</a><span>(2)</span>
</li>
<li>
<a href="/couhujia/article/details/8492296" title="proxy patter --代理模式">proxy patter --代理模式</a><span>(2)</span>
</li>
<li>
<a href="/couhujia/article/details/8365252" title="singleton pattern--单件模式">singleton pattern--单件模式</a><span>(1)</span>
</li>
<li>
<a href="/couhujia/article/details/8365260" title="bridge pattern -- 桥接模式">bridge pattern -- 桥接模式</a><span>(0)</span>
</li>
<li>
<a href="/couhujia/article/details/8365261" title="composite pattern -- 组合模式">composite pattern -- 组合模式</a><span>(0)</span>
</li>
<li>
<a href="/couhujia/article/details/8365263" title="decorator pattern -- 装饰模式">decorator pattern -- 装饰模式</a><span>(0)</span>
</li>
<li>
<a href="/couhujia/article/details/8365243" title="#include是怎么样工作的？">#include是怎么样工作的？</a><span>(0)</span>
</li>
</ul>
</div>
<div id="newcomments" class="panel">
<ul class="panel_head"><span>最新评论</span></ul>
<ul class="panel_body itemlist">
    <li>
    <a href="/couhujia/article/details/8474905#comments">怎么有效的防止内存泄漏</a>
    <p style="margin:0px;"><a href="/yangxiaoluck" class="user_name">yangxiaoluck</a>:
嗯，任何要分配空间的地方其实都需要去try住，不仅仅是构造函数里面。
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8365252#comments">singleton pattern--单件模式</a>
    <p style="margin:0px;"><a href="/fanzheng220112583" class="user_name">fanzheng220112583</a>:
你的这些方法模式的术语从何而来？感觉C++中，不同人用的术语太过于烦杂，没有统一性。。。
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8365249#comments">C++文件依存关系</a>
    <p style="margin:0px;"><a href="/Blues1021" class="user_name">Blues1021</a>:
把1000个文件分成几个模块做成DLL,不必生成一个巨型的.obj，也就不需要这样别有用心的设计了吧...
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8474905#comments">怎么有效的防止内存泄漏</a>
    <p style="margin:0px;"><a href="/lanbinbin1986129" class="user_name">lanbinbin1986129</a>:
这种方法确实不错，以前都是这样去解决这个问题：Image* GetImage(){if(pImg =...
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8474905#comments">怎么有效的防止内存泄漏</a>
    <p style="margin:0px;"><a href="/qiaojava1" class="user_name">qiaojava1</a>:
嗯,挺有用的~~
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8499642#comments">Chain of Responsibility -- 责任链模式</a>
    <p style="margin:0px;"><a href="/xzshen2011" class="user_name">xzshen2011</a>:
我们来实现这一场景吧
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8474905#comments">怎么有效的防止内存泄漏</a>
    <p style="margin:0px;"><a href="/hanmingjun" class="user_name">hanmingjun</a>:
没记错的话，好像exception c++里面有更好的方法哎
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8499642#comments">Chain of Responsibility -- 责任链模式</a>
    <p style="margin:0px;"><a href="/wwwsily" class="user_name">wwwsily</a>:
厉害 学习了
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8474905#comments">怎么有效的防止内存泄漏</a>
    <p style="margin:0px;"><a href="/dyx1024" class="user_name">dyx1024</a>:
对于这种场景 ，我通常的做法是，分配完后立刻检查是否分配成功，如上，pImg成功，但pVoi没成功，...
    </p>
    </li>
    <li>
    <a href="/couhujia/article/details/8492296#comments">proxy patter --代理模式</a>
    <p style="margin:0px;"><a href="/shen823797837" class="user_name">shen823797837</a>:
貌似代理类里面的对象漏掉了吧？不然怎么知道要代理谁呢？
    </p>
    </li>
</ul>
</div>
</div>
<div class="clear"></div>
</div>

<div class="clear"></div>
</div>

<script type="text/javascript" src="http://static.blog.csdn.net/scripts/newblog.min.js?v=1.1"></script>
<script type="text/javascript" src="http://medal.blog.csdn.net/showblogmedal.ashx?blogid=691650"></script>

<script type="text/javascript">
document.write('<script type="text/javascript" src="http://csdnimg.cn/pubfooter/js/publib_footer.js?' + Math.floor(new Date()/120000).toString(36) + '="></'+'script>');
</script>

<script type="text/javascript" src="http://passport.csdn.net/content/loginbox/login.js"></script>
<script type="text/javascript">document.write("<img src=http://counter.csdn.net/pv.aspx?id=24 border=0 width=0 height=0>");</script>
<script type="text/javascript" src="http://www.csdn.net/ui/scripts/Csdn/counter.js?v=1"></script>


<script type="text/javascript" src="http://ad.csdn.net/scripts/ad-blog.js"></script>

<script type="text/javascript" src="http://zz.csdn.net/js/count.js"></script>

</div>
</body>
</html>